//Recursive
public class Solution {
    public static int minimizeCost(int n, int k, int []height){
        return fun(n, height, k);
    }
    public static int fun(int n, int heights[], int k) {
        if(n==1) return 0;
        if(n==2) return Math.abs(heights[1]-heights[0]);
        int ans = Integer.MAX_VALUE;
        for(int i=1; i<=k; i++){
            if(n-i <= 0){
                break;
            }
            ans = Math.min(ans, 
                    Math.abs(heights[n-1]-heights[n-1-i]) + fun(n-i, heights, k)
                );
        }
        return ans;
    }
}

//Bottom Up
public class Solution {
    public static int minimizeCost(int n, int k, int []height){
        return fun(n, height, k);
    }
    public static int fun(int n, int heights[], int k) {
        if(n==1) return 0;
        if(n==2) return Math.abs(heights[1]-heights[0]);
        int dp[] = new int[n+1];
        dp[1] = 0;
        dp[2] = Math.abs(heights[1]-heights[0]);
        for(int x=3; x<=n; x++){
            int ans = Integer.MAX_VALUE;
            for(int i=1; i<=k; i++){
                if(x-i <= 0){
                    break;
                }
                ans = Math.min(ans, 
                        Math.abs(heights[x-1]-heights[x-1-i]) + dp[x-i]
                    );
            }
            dp[x] = ans;
        }
        return dp[n];
    }
}
