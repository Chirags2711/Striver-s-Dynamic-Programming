//Recursive
public static int ninjaTraining(int n, int points[][]) {
    return ninjaTrainingHelper(0, n, points, -1);
}
public static int ninjaTrainingHelper(int i, int n, int points[][], int prev){
    if(i==n) return 0;
    int ans1=0, ans2=0, ans3=0;
    if(prev!=0){
        ans1 = points[i][0] + ninjaTrainingHelper(i+1, n, points, 0);
    }
    if(prev!=1){
        ans2 = points[i][1] + ninjaTrainingHelper(i+1, n, points, 1);
    }
    if(prev!=2){
        ans3 = points[i][2] + ninjaTrainingHelper(i+1, n, points, 2);
    }
    return Math.max(ans1, Math.max(ans2, ans3));
}

//Memoized
public static int ninjaTraining(int n, int points[][]) {
    int dp[][] = new int[n+1][4];
    for(int arr[]: dp){
        Arrays.fill(arr, -1);
    }
    return ninjaTrainingHelper(n, points, -1, dp);
}
public static int ninjaTrainingHelper(int n, int points[][], int prev, int[][]dp){
    if(n==0) return 0;
    if(dp[n][prev+1]!=-1) return dp[n][prev+1];
    int ans1=0, ans2=0, ans3=0;
    if(prev!=0){
        ans1 = points[n-1][0] + ninjaTrainingHelper(n-1, points, 0, dp);
    }
    if(prev!=1){
        ans2 = points[n-1][1] + ninjaTrainingHelper(n-1, points, 1, dp);
    }
    if(prev!=2){
        ans3 = points[n-1][2] + ninjaTrainingHelper(n-1, points, 2, dp);
    }
    return dp[n][prev+1] = Math.max(ans1, Math.max(ans2, ans3));
}

//Tabulation
public static int ninjaTraining(int n, int points[][]) {
    int dp[][] = new int[n+1][4];
    for(int i=0; i<4; i++){
        dp[n][i] = 0;
    }
    for(int i=n-1; i>=0; i--){
        for(int prev=-1; prev<=2; prev++){
            int ans1=0, ans2=0, ans3=0;
            if(prev!=0){
                ans1 = points[i][0] + dp[i+1][1];
            }
            if(prev!=1){
                ans2 = points[i][1] + dp[i+1][2];
            }
            if(prev!=2){
                ans3 = points[i][2] + dp[i+1][3];
            }
            dp[i][prev+1] = Math.max(ans1, Math.max(ans2, ans3));
        }
    }
    return dp[0][0];
}
