//Rec
class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        return uniquePathsHelper(0, 0, m, n, obstacleGrid);
    }
    public int uniquePathsHelper(int i, int j, int m, int n, int[][] obstacleGrid){
        if(i>=m || j>=n) return 0;
        if(obstacleGrid[i][j]==1) return 0;
        if(i == m-1 && j==n-1) return 1;
        int down = uniquePathsHelper(i+1, j, m, n, obstacleGrid);
        int right = uniquePathsHelper(i, j+1, m, n, obstacleGrid);
        return down + right;
    }
}

//Memoized
class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int dp[][] = new int[m][n];
        for(int arr[]: dp){
            Arrays.fill(arr, -1);
        }
        return uniquePathsHelper(0, 0, m, n, obstacleGrid, dp);
    }
    public int uniquePathsHelper(int i, int j, int m, int n, int[][] obstacleGrid, int[][] dp){
        if(i>=m || j>=n) return 0;
        if(obstacleGrid[i][j]==1) return 0;
        if(i == m-1 && j==n-1) return 1;
        if(dp[i][j]!=-1) return dp[i][j];
        int down = uniquePathsHelper(i+1, j, m, n, obstacleGrid, dp);
        int right = uniquePathsHelper(i, j+1, m, n, obstacleGrid, dp);
        return dp[i][j] = down + right;
    }
}

//Tabulation
class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        if(obstacleGrid[m-1][n-1]==1) return 0;
        int dp[][] = new int[m][n];
        dp[m-1][n-1] = 1;
        for(int i=m-1; i>=0; i--){
            for(int j=n-1; j>=0; j--){
                if(i==m-1 && j==n-1) continue;
                if(obstacleGrid[i][j]==1){
                    dp[i][j] = 0;
                }else{
                    int down = 0, right = 0;
                    if(i+1<m)
                        down = dp[i+1][j];
                    if(j+1<n)
                        right = dp[i][j+1];
                    dp[i][j] = down + right;
                }
            }
        }
        return dp[0][0];
    }
}
