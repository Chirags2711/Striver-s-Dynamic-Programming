import java.util.Arrays;
import java.util.Scanner;
public class Solution {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		System.out.println(f(n));
	}
	public static int f(int n){
		//SPACE OPTIMIZATION
		int prev2=0, prev=1;
		for (int i = 2; i <= n; i++) {
			int curr = prev+prev2;
			prev2 = prev;
			prev = curr;
		}
		return prev;
	}
}


//Brute
public static int f(int n){
	if(n==1 || n==2) return 1;
	return f(n-1) + f(n-2);
}

//Memoized (Top Down)
public static int f(int n, int[] dp){
	if(n==1 || n==2) return 1;
	if(dp[n] != -1){
		return dp[n];
	}
	return dp[n] = f(n-1, dp) + f(n-2, dp);
}

//Tabulation (Bottom Up)
public static int f(int n){
	if(n==1 || n==2) return 1;
	int[] dp = new int[n+1];
	dp[1] = 1;
	dp[2] = 1;
	for(int i=3; i<=n; i++){
		dp[i] = dp[i-1] + dp[i-2];
	}
	return dp[n];
}

//Space Optimization
public static int f(int n){
	if(n==1 || n==2) return 1;
	int prev1 = 1; //Base Case
	int prev2 = 1; //Base Case
	int ans = 0;
	for(int i=3; i<=n; i++){
		ans = prev2 + prev1; //Hypothesis
		prev1 = prev2; //Induction
		prev2 = ans; //Induction
	}
	return ans;
}
