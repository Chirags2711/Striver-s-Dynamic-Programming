//Recursive
public static int frogJump(int n, int heights[]) { //for n stairs
    if(n==1) return 0;
    if(n==2) return Math.abs(heights[1]-heights[0]);
    int ans1 = Math.abs(heights[n-1]-heights[n-2]) + frogJump(n-1, heights); //for n-1 stairs + going from nth stair to (n-1)th stair, 0 indexed change.
    int ans2 = Math.abs(heights[n-1]-heights[n-3]) + frogJump(n-2, heights);
    return Math.min(ans1, ans2);
}

//Bottom Up + Space Optimization
public static int frogJump(int n, int heights[]) {
    if(n==1) return 0;
    if(n==2) return Math.abs(heights[1]-heights[0]);
    int prev1 = 0;
    int prev2 = Math.abs(heights[1]-heights[0]);
    int ans = 0;
    for(int i=3; i<=n; i++){
        int ans1 = Math.abs(heights[i-1]-heights[i-2]) + prev2;
        int ans2 = Math.abs(heights[i-1]-heights[i-3]) + prev1;
        ans = Math.min(ans1, ans2);
        prev1 = prev2;
        prev2 = ans;
    }
    return ans;
}
